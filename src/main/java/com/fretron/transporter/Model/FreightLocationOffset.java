/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.fretron.transporter.Model;
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class FreightLocationOffset extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"FreightLocationOffset\",\"namespace\":\"com.transporter.Model\",\"fields\":[{\"name\":\"freightLocation\",\"type\":{\"type\":\"record\",\"name\":\"FreightLocation\",\"fields\":[{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"default\":null},{\"name\":\"geofence\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Geofence\",\"fields\":[{\"name\":\"center\",\"type\":{\"type\":\"record\",\"name\":\"Location\",\"fields\":[{\"name\":\"latitude\",\"type\":\"double\"},{\"name\":\"longitude\",\"type\":\"double\"}]}},{\"name\":\"boundary\",\"type\":{\"type\":\"array\",\"items\":\"Location\"}}]}],\"default\":null},{\"name\":\"material\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}],\"default\":null}]}},{\"name\":\"priceOffset\",\"type\":\"int\"},{\"name\":\"etdOffset\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public FreightLocation freightLocation;
  @Deprecated public int priceOffset;
  @Deprecated public int etdOffset;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public FreightLocationOffset() {}

  /**
   * All-args constructor.
   */
  public FreightLocationOffset(FreightLocation freightLocation, java.lang.Integer priceOffset, java.lang.Integer etdOffset) {
    this.freightLocation = freightLocation;
    this.priceOffset = priceOffset;
    this.etdOffset = etdOffset;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return freightLocation;
    case 1: return priceOffset;
    case 2: return etdOffset;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: freightLocation = (FreightLocation)value$; break;
    case 1: priceOffset = (java.lang.Integer)value$; break;
    case 2: etdOffset = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'freightLocation' field.
   */
  public FreightLocation getFreightLocation() {
    return freightLocation;
  }

  /**
   * Sets the value of the 'freightLocation' field.
   * @param value the value to set.
   */
  public void setFreightLocation(FreightLocation value) {
    this.freightLocation = value;
  }

  /**
   * Gets the value of the 'priceOffset' field.
   */
  public java.lang.Integer getPriceOffset() {
    return priceOffset;
  }

  /**
   * Sets the value of the 'priceOffset' field.
   * @param value the value to set.
   */
  public void setPriceOffset(java.lang.Integer value) {
    this.priceOffset = value;
  }

  /**
   * Gets the value of the 'etdOffset' field.
   */
  public java.lang.Integer getEtdOffset() {
    return etdOffset;
  }

  /**
   * Sets the value of the 'etdOffset' field.
   * @param value the value to set.
   */
  public void setEtdOffset(java.lang.Integer value) {
    this.etdOffset = value;
  }

  /** Creates a new FreightLocationOffset RecordBuilder */
  public static FreightLocationOffset.Builder newBuilder() {
    return new FreightLocationOffset.Builder();
  }
  
  /** Creates a new FreightLocationOffset RecordBuilder by copying an existing Builder */
  public static FreightLocationOffset.Builder newBuilder(FreightLocationOffset.Builder other) {
    return new FreightLocationOffset.Builder(other);
  }
  
  /** Creates a new FreightLocationOffset RecordBuilder by copying an existing FreightLocationOffset instance */
  public static FreightLocationOffset.Builder newBuilder(FreightLocationOffset other) {
    return new FreightLocationOffset.Builder(other);
  }
  
  /**
   * RecordBuilder for FreightLocationOffset instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<FreightLocationOffset>
    implements org.apache.avro.data.RecordBuilder<FreightLocationOffset> {

    private FreightLocation freightLocation;
    private int priceOffset;
    private int etdOffset;

    /** Creates a new Builder */
    private Builder() {
      super(FreightLocationOffset.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(FreightLocationOffset.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.freightLocation)) {
        this.freightLocation = data().deepCopy(fields()[0].schema(), other.freightLocation);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.priceOffset)) {
        this.priceOffset = data().deepCopy(fields()[1].schema(), other.priceOffset);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.etdOffset)) {
        this.etdOffset = data().deepCopy(fields()[2].schema(), other.etdOffset);
        fieldSetFlags()[2] = true;
      }
    }
    
    /** Creates a Builder by copying an existing FreightLocationOffset instance */
    private Builder(FreightLocationOffset other) {
            super(FreightLocationOffset.SCHEMA$);
      if (isValidValue(fields()[0], other.freightLocation)) {
        this.freightLocation = data().deepCopy(fields()[0].schema(), other.freightLocation);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.priceOffset)) {
        this.priceOffset = data().deepCopy(fields()[1].schema(), other.priceOffset);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.etdOffset)) {
        this.etdOffset = data().deepCopy(fields()[2].schema(), other.etdOffset);
        fieldSetFlags()[2] = true;
      }
    }

    /** Gets the value of the 'freightLocation' field */
    public FreightLocation getFreightLocation() {
      return freightLocation;
    }
    
    /** Sets the value of the 'freightLocation' field */
    public FreightLocationOffset.Builder setFreightLocation(FreightLocation value) {
      validate(fields()[0], value);
      this.freightLocation = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'freightLocation' field has been set */
    public boolean hasFreightLocation() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'freightLocation' field */
    public FreightLocationOffset.Builder clearFreightLocation() {
      freightLocation = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'priceOffset' field */
    public java.lang.Integer getPriceOffset() {
      return priceOffset;
    }
    
    /** Sets the value of the 'priceOffset' field */
    public FreightLocationOffset.Builder setPriceOffset(int value) {
      validate(fields()[1], value);
      this.priceOffset = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'priceOffset' field has been set */
    public boolean hasPriceOffset() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'priceOffset' field */
    public FreightLocationOffset.Builder clearPriceOffset() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'etdOffset' field */
    public java.lang.Integer getEtdOffset() {
      return etdOffset;
    }
    
    /** Sets the value of the 'etdOffset' field */
    public FreightLocationOffset.Builder setEtdOffset(int value) {
      validate(fields()[2], value);
      this.etdOffset = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'etdOffset' field has been set */
    public boolean hasEtdOffset() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'etdOffset' field */
    public FreightLocationOffset.Builder clearEtdOffset() {
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public FreightLocationOffset build() {
      try {
        FreightLocationOffset record = new FreightLocationOffset();
        record.freightLocation = fieldSetFlags()[0] ? this.freightLocation : (FreightLocation) defaultValue(fields()[0]);
        record.priceOffset = fieldSetFlags()[1] ? this.priceOffset : (java.lang.Integer) defaultValue(fields()[1]);
        record.etdOffset = fieldSetFlags()[2] ? this.etdOffset : (java.lang.Integer) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
