/**
 * Autogenerated by Avro
 * <p>
 * DO NOT EDIT DIRECTLY
 */
package com.fretron.Model;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Geofence extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
    public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Geofence\",\"namespace\":\"com.fretron.Model\",\"fields\":[{\"name\":\"center\",\"type\":{\"type\":\"record\",\"name\":\"Location\",\"fields\":[{\"name\":\"latitude\",\"type\":\"double\"},{\"name\":\"longitude\",\"type\":\"double\"}]}},{\"name\":\"boundary\",\"type\":{\"type\":\"array\",\"items\":\"Location\"}}]}");
    @Deprecated
    public com.fretron.Model.Location center;
    @Deprecated
    public java.util.List<com.fretron.Model.Location> boundary;
    /**
     * Default constructor.  Note that this does not initialize fields
     * to their default values from the schema.  If that is desired then
     * one should use <code>newBuilder()</code>.
     */
    public Geofence() {
    }

    /**
     * All-args constructor.
     */
    public Geofence(com.fretron.Model.Location center, java.util.List<com.fretron.Model.Location> boundary) {
        this.center = center;
        this.boundary = boundary;
    }

    public static org.apache.avro.Schema getClassSchema() {
        return SCHEMA$;
    }

    /** Creates a new Geofence RecordBuilder */
    public static com.fretron.Model.Geofence.Builder newBuilder() {
        return new com.fretron.Model.Geofence.Builder();
    }

    /** Creates a new Geofence RecordBuilder by copying an existing Builder */
    public static com.fretron.Model.Geofence.Builder newBuilder(com.fretron.Model.Geofence.Builder other) {
        return new com.fretron.Model.Geofence.Builder(other);
    }

    /** Creates a new Geofence RecordBuilder by copying an existing Geofence instance */
    public static com.fretron.Model.Geofence.Builder newBuilder(com.fretron.Model.Geofence other) {
        return new com.fretron.Model.Geofence.Builder(other);
    }

    public org.apache.avro.Schema getSchema() {
        return SCHEMA$;
    }

    // Used by DatumWriter.  Applications should not call.
    public java.lang.Object get(int field$) {
        switch (field$) {
            case 0:
                return center;
            case 1:
                return boundary;
            default:
                throw new org.apache.avro.AvroRuntimeException("Bad index");
        }
    }

    // Used by DatumReader.  Applications should not call.
    @SuppressWarnings(value = "unchecked")
    public void put(int field$, java.lang.Object value$) {
        switch (field$) {
            case 0:
                center = (com.fretron.Model.Location) value$;
                break;
            case 1:
                boundary = (java.util.List<com.fretron.Model.Location>) value$;
                break;
            default:
                throw new org.apache.avro.AvroRuntimeException("Bad index");
        }
    }

    /**
     * Gets the value of the 'center' field.
     */
    public com.fretron.Model.Location getCenter() {
        return center;
    }

    /**
     * Sets the value of the 'center' field.
     * @param value the value to set.
     */
    public void setCenter(com.fretron.Model.Location value) {
        this.center = value;
    }

    /**
     * Gets the value of the 'boundary' field.
     */
    public java.util.List<com.fretron.Model.Location> getBoundary() {
        return boundary;
    }

    /**
     * Sets the value of the 'boundary' field.
     * @param value the value to set.
     */
    public void setBoundary(java.util.List<com.fretron.Model.Location> value) {
        this.boundary = value;
    }

    /**
     * RecordBuilder for Geofence instances.
     */
    public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Geofence>
            implements org.apache.avro.data.RecordBuilder<Geofence> {

        private com.fretron.Model.Location center;
        private java.util.List<com.fretron.Model.Location> boundary;

        /** Creates a new Builder */
        private Builder() {
            super(com.fretron.Model.Geofence.SCHEMA$);
        }

        /** Creates a Builder by copying an existing Builder */
        private Builder(com.fretron.Model.Geofence.Builder other) {
            super(other);
            if (isValidValue(fields()[0], other.center)) {
                this.center = data().deepCopy(fields()[0].schema(), other.center);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.boundary)) {
                this.boundary = data().deepCopy(fields()[1].schema(), other.boundary);
                fieldSetFlags()[1] = true;
            }
        }

        /** Creates a Builder by copying an existing Geofence instance */
        private Builder(com.fretron.Model.Geofence other) {
            super(com.fretron.Model.Geofence.SCHEMA$);
            if (isValidValue(fields()[0], other.center)) {
                this.center = data().deepCopy(fields()[0].schema(), other.center);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.boundary)) {
                this.boundary = data().deepCopy(fields()[1].schema(), other.boundary);
                fieldSetFlags()[1] = true;
            }
        }

        /** Gets the value of the 'center' field */
        public com.fretron.Model.Location getCenter() {
            return center;
        }

        /** Sets the value of the 'center' field */
        public com.fretron.Model.Geofence.Builder setCenter(com.fretron.Model.Location value) {
            validate(fields()[0], value);
            this.center = value;
            fieldSetFlags()[0] = true;
            return this;
        }

        /** Checks whether the 'center' field has been set */
        public boolean hasCenter() {
            return fieldSetFlags()[0];
        }

        /** Clears the value of the 'center' field */
        public com.fretron.Model.Geofence.Builder clearCenter() {
            center = null;
            fieldSetFlags()[0] = false;
            return this;
        }

        /** Gets the value of the 'boundary' field */
        public java.util.List<com.fretron.Model.Location> getBoundary() {
            return boundary;
        }

        /** Sets the value of the 'boundary' field */
        public com.fretron.Model.Geofence.Builder setBoundary(java.util.List<com.fretron.Model.Location> value) {
            validate(fields()[1], value);
            this.boundary = value;
            fieldSetFlags()[1] = true;
            return this;
        }

        /** Checks whether the 'boundary' field has been set */
        public boolean hasBoundary() {
            return fieldSetFlags()[1];
        }

        /** Clears the value of the 'boundary' field */
        public com.fretron.Model.Geofence.Builder clearBoundary() {
            boundary = null;
            fieldSetFlags()[1] = false;
            return this;
        }

        @Override
        public Geofence build() {
            try {
                Geofence record = new Geofence();
                record.center = fieldSetFlags()[0] ? this.center : (com.fretron.Model.Location) defaultValue(fields()[0]);
                record.boundary = fieldSetFlags()[1] ? this.boundary : (java.util.List<com.fretron.Model.Location>) defaultValue(fields()[1]);
                return record;
            } catch (Exception e) {
                throw new org.apache.avro.AvroRuntimeException(e);
            }
        }
    }
}
