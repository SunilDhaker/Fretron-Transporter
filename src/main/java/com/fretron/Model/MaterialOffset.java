/**
 * Autogenerated by Avro
 * <p>
 * DO NOT EDIT DIRECTLY
 */
package com.fretron.Model;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class MaterialOffset extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
    public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"MaterialOffset\",\"namespace\":\"com.fretron.Model\",\"fields\":[{\"name\":\"material\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"materialPriceOffset\",\"type\":\"int\"}]}");
    @Deprecated
    public java.lang.String material;
    @Deprecated
    public int materialPriceOffset;
    /**
     * Default constructor.  Note that this does not initialize fields
     * to their default values from the schema.  If that is desired then
     * one should use <code>newBuilder()</code>.
     */
    public MaterialOffset() {
    }

    /**
     * All-args constructor.
     */
    public MaterialOffset(java.lang.String material, java.lang.Integer materialPriceOffset) {
        this.material = material;
        this.materialPriceOffset = materialPriceOffset;
    }

    public static org.apache.avro.Schema getClassSchema() {
        return SCHEMA$;
    }

    /** Creates a new MaterialOffset RecordBuilder */
    public static com.fretron.Model.MaterialOffset.Builder newBuilder() {
        return new com.fretron.Model.MaterialOffset.Builder();
    }

    /** Creates a new MaterialOffset RecordBuilder by copying an existing Builder */
    public static com.fretron.Model.MaterialOffset.Builder newBuilder(com.fretron.Model.MaterialOffset.Builder other) {
        return new com.fretron.Model.MaterialOffset.Builder(other);
    }

    /** Creates a new MaterialOffset RecordBuilder by copying an existing MaterialOffset instance */
    public static com.fretron.Model.MaterialOffset.Builder newBuilder(com.fretron.Model.MaterialOffset other) {
        return new com.fretron.Model.MaterialOffset.Builder(other);
    }

    public org.apache.avro.Schema getSchema() {
        return SCHEMA$;
    }

    // Used by DatumWriter.  Applications should not call.
    public java.lang.Object get(int field$) {
        switch (field$) {
            case 0:
                return material;
            case 1:
                return materialPriceOffset;
            default:
                throw new org.apache.avro.AvroRuntimeException("Bad index");
        }
    }

    // Used by DatumReader.  Applications should not call.
    @SuppressWarnings(value = "unchecked")
    public void put(int field$, java.lang.Object value$) {
        switch (field$) {
            case 0:
                material = (java.lang.String) value$;
                break;
            case 1:
                materialPriceOffset = (java.lang.Integer) value$;
                break;
            default:
                throw new org.apache.avro.AvroRuntimeException("Bad index");
        }
    }

    /**
     * Gets the value of the 'material' field.
     */
    public java.lang.String getMaterial() {
        return material;
    }

    /**
     * Sets the value of the 'material' field.
     * @param value the value to set.
     */
    public void setMaterial(java.lang.String value) {
        this.material = value;
    }

    /**
     * Gets the value of the 'materialPriceOffset' field.
     */
    public java.lang.Integer getMaterialPriceOffset() {
        return materialPriceOffset;
    }

    /**
     * Sets the value of the 'materialPriceOffset' field.
     * @param value the value to set.
     */
    public void setMaterialPriceOffset(java.lang.Integer value) {
        this.materialPriceOffset = value;
    }

    /**
     * RecordBuilder for MaterialOffset instances.
     */
    public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<MaterialOffset>
            implements org.apache.avro.data.RecordBuilder<MaterialOffset> {

        private java.lang.String material;
        private int materialPriceOffset;

        /** Creates a new Builder */
        private Builder() {
            super(com.fretron.Model.MaterialOffset.SCHEMA$);
        }

        /** Creates a Builder by copying an existing Builder */
        private Builder(com.fretron.Model.MaterialOffset.Builder other) {
            super(other);
            if (isValidValue(fields()[0], other.material)) {
                this.material = data().deepCopy(fields()[0].schema(), other.material);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.materialPriceOffset)) {
                this.materialPriceOffset = data().deepCopy(fields()[1].schema(), other.materialPriceOffset);
                fieldSetFlags()[1] = true;
            }
        }

        /** Creates a Builder by copying an existing MaterialOffset instance */
        private Builder(com.fretron.Model.MaterialOffset other) {
            super(com.fretron.Model.MaterialOffset.SCHEMA$);
            if (isValidValue(fields()[0], other.material)) {
                this.material = data().deepCopy(fields()[0].schema(), other.material);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.materialPriceOffset)) {
                this.materialPriceOffset = data().deepCopy(fields()[1].schema(), other.materialPriceOffset);
                fieldSetFlags()[1] = true;
            }
        }

        /** Gets the value of the 'material' field */
        public java.lang.String getMaterial() {
            return material;
        }

        /** Sets the value of the 'material' field */
        public com.fretron.Model.MaterialOffset.Builder setMaterial(java.lang.String value) {
            validate(fields()[0], value);
            this.material = value;
            fieldSetFlags()[0] = true;
            return this;
        }

        /** Checks whether the 'material' field has been set */
        public boolean hasMaterial() {
            return fieldSetFlags()[0];
        }

        /** Clears the value of the 'material' field */
        public com.fretron.Model.MaterialOffset.Builder clearMaterial() {
            material = null;
            fieldSetFlags()[0] = false;
            return this;
        }

        /** Gets the value of the 'materialPriceOffset' field */
        public java.lang.Integer getMaterialPriceOffset() {
            return materialPriceOffset;
        }

        /** Sets the value of the 'materialPriceOffset' field */
        public com.fretron.Model.MaterialOffset.Builder setMaterialPriceOffset(int value) {
            validate(fields()[1], value);
            this.materialPriceOffset = value;
            fieldSetFlags()[1] = true;
            return this;
        }

        /** Checks whether the 'materialPriceOffset' field has been set */
        public boolean hasMaterialPriceOffset() {
            return fieldSetFlags()[1];
        }

        /** Clears the value of the 'materialPriceOffset' field */
        public com.fretron.Model.MaterialOffset.Builder clearMaterialPriceOffset() {
            fieldSetFlags()[1] = false;
            return this;
        }

        @Override
        public MaterialOffset build() {
            try {
                MaterialOffset record = new MaterialOffset();
                record.material = fieldSetFlags()[0] ? this.material : (java.lang.String) defaultValue(fields()[0]);
                record.materialPriceOffset = fieldSetFlags()[1] ? this.materialPriceOffset : (java.lang.Integer) defaultValue(fields()[1]);
                return record;
            } catch (Exception e) {
                throw new org.apache.avro.AvroRuntimeException(e);
            }
        }
    }
}
