/**
 * Autogenerated by Avro
 * <p>
 * DO NOT EDIT DIRECTLY
 */
package com.fretron.Model;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Location extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
    public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Location\",\"namespace\":\"com.fretron.Model\",\"fields\":[{\"name\":\"latitude\",\"type\":\"double\"},{\"name\":\"longitude\",\"type\":\"double\"}]}");
    @Deprecated
    public double latitude;
    @Deprecated
    public double longitude;
    /**
     * Default constructor.  Note that this does not initialize fields
     * to their default values from the schema.  If that is desired then
     * one should use <code>newBuilder()</code>.
     */
    public Location() {
    }

    /**
     * All-args constructor.
     */
    public Location(java.lang.Double latitude, java.lang.Double longitude) {
        this.latitude = latitude;
        this.longitude = longitude;
    }

    public static org.apache.avro.Schema getClassSchema() {
        return SCHEMA$;
    }

    /** Creates a new Location RecordBuilder */
    public static com.fretron.Model.Location.Builder newBuilder() {
        return new com.fretron.Model.Location.Builder();
    }

    /** Creates a new Location RecordBuilder by copying an existing Builder */
    public static com.fretron.Model.Location.Builder newBuilder(com.fretron.Model.Location.Builder other) {
        return new com.fretron.Model.Location.Builder(other);
    }

    /** Creates a new Location RecordBuilder by copying an existing Location instance */
    public static com.fretron.Model.Location.Builder newBuilder(com.fretron.Model.Location other) {
        return new com.fretron.Model.Location.Builder(other);
    }

    public org.apache.avro.Schema getSchema() {
        return SCHEMA$;
    }

    // Used by DatumWriter.  Applications should not call.
    public java.lang.Object get(int field$) {
        switch (field$) {
            case 0:
                return latitude;
            case 1:
                return longitude;
            default:
                throw new org.apache.avro.AvroRuntimeException("Bad index");
        }
    }

    // Used by DatumReader.  Applications should not call.
    @SuppressWarnings(value = "unchecked")
    public void put(int field$, java.lang.Object value$) {
        switch (field$) {
            case 0:
                latitude = (java.lang.Double) value$;
                break;
            case 1:
                longitude = (java.lang.Double) value$;
                break;
            default:
                throw new org.apache.avro.AvroRuntimeException("Bad index");
        }
    }

    /**
     * Gets the value of the 'latitude' field.
     */
    public java.lang.Double getLatitude() {
        return latitude;
    }

    /**
     * Sets the value of the 'latitude' field.
     * @param value the value to set.
     */
    public void setLatitude(java.lang.Double value) {
        this.latitude = value;
    }

    /**
     * Gets the value of the 'longitude' field.
     */
    public java.lang.Double getLongitude() {
        return longitude;
    }

    /**
     * Sets the value of the 'longitude' field.
     * @param value the value to set.
     */
    public void setLongitude(java.lang.Double value) {
        this.longitude = value;
    }

    /**
     * RecordBuilder for Location instances.
     */
    public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Location>
            implements org.apache.avro.data.RecordBuilder<Location> {

        private double latitude;
        private double longitude;

        /** Creates a new Builder */
        private Builder() {
            super(com.fretron.Model.Location.SCHEMA$);
        }

        /** Creates a Builder by copying an existing Builder */
        private Builder(com.fretron.Model.Location.Builder other) {
            super(other);
            if (isValidValue(fields()[0], other.latitude)) {
                this.latitude = data().deepCopy(fields()[0].schema(), other.latitude);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.longitude)) {
                this.longitude = data().deepCopy(fields()[1].schema(), other.longitude);
                fieldSetFlags()[1] = true;
            }
        }

        /** Creates a Builder by copying an existing Location instance */
        private Builder(com.fretron.Model.Location other) {
            super(com.fretron.Model.Location.SCHEMA$);
            if (isValidValue(fields()[0], other.latitude)) {
                this.latitude = data().deepCopy(fields()[0].schema(), other.latitude);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.longitude)) {
                this.longitude = data().deepCopy(fields()[1].schema(), other.longitude);
                fieldSetFlags()[1] = true;
            }
        }

        /** Gets the value of the 'latitude' field */
        public java.lang.Double getLatitude() {
            return latitude;
        }

        /** Sets the value of the 'latitude' field */
        public com.fretron.Model.Location.Builder setLatitude(double value) {
            validate(fields()[0], value);
            this.latitude = value;
            fieldSetFlags()[0] = true;
            return this;
        }

        /** Checks whether the 'latitude' field has been set */
        public boolean hasLatitude() {
            return fieldSetFlags()[0];
        }

        /** Clears the value of the 'latitude' field */
        public com.fretron.Model.Location.Builder clearLatitude() {
            fieldSetFlags()[0] = false;
            return this;
        }

        /** Gets the value of the 'longitude' field */
        public java.lang.Double getLongitude() {
            return longitude;
        }

        /** Sets the value of the 'longitude' field */
        public com.fretron.Model.Location.Builder setLongitude(double value) {
            validate(fields()[1], value);
            this.longitude = value;
            fieldSetFlags()[1] = true;
            return this;
        }

        /** Checks whether the 'longitude' field has been set */
        public boolean hasLongitude() {
            return fieldSetFlags()[1];
        }

        /** Clears the value of the 'longitude' field */
        public com.fretron.Model.Location.Builder clearLongitude() {
            fieldSetFlags()[1] = false;
            return this;
        }

        @Override
        public Location build() {
            try {
                Location record = new Location();
                record.latitude = fieldSetFlags()[0] ? this.latitude : (java.lang.Double) defaultValue(fields()[0]);
                record.longitude = fieldSetFlags()[1] ? this.longitude : (java.lang.Double) defaultValue(fields()[1]);
                return record;
            } catch (Exception e) {
                throw new org.apache.avro.AvroRuntimeException(e);
            }
        }
    }
}
