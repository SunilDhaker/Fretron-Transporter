/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.transporter.Model;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Geofence extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Geofence\",\"namespace\":\"com.transporter.Model\",\"fields\":[{\"name\":\"center\",\"type\":{\"type\":\"record\",\"name\":\"Location\",\"fields\":[{\"name\":\"latitude\",\"type\":\"double\"},{\"name\":\"longitude\",\"type\":\"double\"}]}},{\"name\":\"boundry\",\"type\":{\"type\":\"array\",\"items\":\"Location\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public com.transporter.Model.Location center;
  @Deprecated public java.util.List<com.transporter.Model.Location> boundry;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Geofence() {}

  /**
   * All-args constructor.
   */
  public Geofence(com.transporter.Model.Location center, java.util.List<com.transporter.Model.Location> boundry) {
    this.center = center;
    this.boundry = boundry;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return center;
    case 1: return boundry;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: center = (com.transporter.Model.Location)value$; break;
    case 1: boundry = (java.util.List<com.transporter.Model.Location>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'center' field.
   */
  public com.transporter.Model.Location getCenter() {
    return center;
  }

  /**
   * Sets the value of the 'center' field.
   * @param value the value to set.
   */
  public void setCenter(com.transporter.Model.Location value) {
    this.center = value;
  }

  /**
   * Gets the value of the 'boundry' field.
   */
  public java.util.List<com.transporter.Model.Location> getBoundry() {
    return boundry;
  }

  /**
   * Sets the value of the 'boundry' field.
   * @param value the value to set.
   */
  public void setBoundry(java.util.List<com.transporter.Model.Location> value) {
    this.boundry = value;
  }

  /** Creates a new Geofence RecordBuilder */
  public static com.transporter.Model.Geofence.Builder newBuilder() {
    return new com.transporter.Model.Geofence.Builder();
  }
  
  /** Creates a new Geofence RecordBuilder by copying an existing Builder */
  public static com.transporter.Model.Geofence.Builder newBuilder(com.transporter.Model.Geofence.Builder other) {
    return new com.transporter.Model.Geofence.Builder(other);
  }
  
  /** Creates a new Geofence RecordBuilder by copying an existing Geofence instance */
  public static com.transporter.Model.Geofence.Builder newBuilder(com.transporter.Model.Geofence other) {
    return new com.transporter.Model.Geofence.Builder(other);
  }
  
  /**
   * RecordBuilder for Geofence instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Geofence>
    implements org.apache.avro.data.RecordBuilder<Geofence> {

    private com.transporter.Model.Location center;
    private java.util.List<com.transporter.Model.Location> boundry;

    /** Creates a new Builder */
    private Builder() {
      super(com.transporter.Model.Geofence.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.transporter.Model.Geofence.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.center)) {
        this.center = data().deepCopy(fields()[0].schema(), other.center);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.boundry)) {
        this.boundry = data().deepCopy(fields()[1].schema(), other.boundry);
        fieldSetFlags()[1] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Geofence instance */
    private Builder(com.transporter.Model.Geofence other) {
            super(com.transporter.Model.Geofence.SCHEMA$);
      if (isValidValue(fields()[0], other.center)) {
        this.center = data().deepCopy(fields()[0].schema(), other.center);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.boundry)) {
        this.boundry = data().deepCopy(fields()[1].schema(), other.boundry);
        fieldSetFlags()[1] = true;
      }
    }

    /** Gets the value of the 'center' field */
    public com.transporter.Model.Location getCenter() {
      return center;
    }
    
    /** Sets the value of the 'center' field */
    public com.transporter.Model.Geofence.Builder setCenter(com.transporter.Model.Location value) {
      validate(fields()[0], value);
      this.center = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'center' field has been set */
    public boolean hasCenter() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'center' field */
    public com.transporter.Model.Geofence.Builder clearCenter() {
      center = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'boundry' field */
    public java.util.List<com.transporter.Model.Location> getBoundry() {
      return boundry;
    }
    
    /** Sets the value of the 'boundry' field */
    public com.transporter.Model.Geofence.Builder setBoundry(java.util.List<com.transporter.Model.Location> value) {
      validate(fields()[1], value);
      this.boundry = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'boundry' field has been set */
    public boolean hasBoundry() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'boundry' field */
    public com.transporter.Model.Geofence.Builder clearBoundry() {
      boundry = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public Geofence build() {
      try {
        Geofence record = new Geofence();
        record.center = fieldSetFlags()[0] ? this.center : (com.transporter.Model.Location) defaultValue(fields()[0]);
        record.boundry = fieldSetFlags()[1] ? this.boundry : (java.util.List<com.transporter.Model.Location>) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
